/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedlist;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Tests {

    @Test
    void testProductNode() {
        // Instantiate a product
        Product p = new TaxableProduct("Test", "1234", 1);
        // Instantiate a ProductNode
        ProductNode pn = new ProductNode(p);

        // Check the size
        assertEquals(1, pn.size(), "Incorrect product node size");
        // Check the sum
        assertEquals(1, pn.sum(), "Incorrect product node sum");

        // Try to add a neighbor product
        Product neighbor = new NonTaxableProduct("Next", "2345", 0.5);
        // Run the add method
        pn.add(neighbor);
        // Now, recheck the size and sum
        assertEquals(2, pn.size(), "Incorrect product node size after adding neighbor");
        // Check the sum
        assertEquals(1.5, pn.sum(), "Incorrect product node sum after adding neighbor");

    }

    @Test
    void testProductList() {
        // Instantiate an empty list
        ProductList productList = new ProductList();

        // Check the size
        assertEquals(0, productList.size(), "Incorrect product list size");
        // Check the sum
        assertEquals(0, productList.sum(), "Incorrect product list sum");

        // Instantiate a product
        Product p = new TaxableProduct("Test", "1234", 1);

        // ADd this product to the list
        productList.add(p);

        // Check the size
        assertEquals(1, productList.size(), "Incorrect product list size after add");
        // Check the sum
        assertEquals(1, productList.sum(), "Incorrect product list sum after add");
    }



    @Test
    void readProducts1() {
        XmlReader xr = new XmlReader("src/test/java/linkedlist/products-1.xml");
        ProductList productList = xr.getProducts();
        System.out.println("Products:" + productList);
        assertNotNull(productList, "Could not get products list");

        // Check the size
        System.out.println("SIZE: " + productList.size());
        assertEquals(1, productList.size(), "Incorrect product list size");
        // Check the sum
        assertEquals(0.99, productList.sum(), "Incorrect product list sum");

        // Check the returned string
        String expected = "Snickers:123-456-78:0.99:taxable";
        assertEquals(expected, productList.toString(), "The string returned by the product list does not match");

    }

    @Test
    void readProducts2() {
        XmlReader xr = new XmlReader("src/test/java/linkedlist/products-2.xml");
        ProductList productList = xr.getProducts();
        System.out.println("Products:" + productList);
        assertNotNull(productList, "Could not get products list");

        // Check the size
        System.out.println("SIZE: " + productList.size());
        assertEquals(2, productList.size(), "Incorrect product list size");
        // Check the sum
        assertEquals(1.97, productList.sum(), "Incorrect product list sum");

        // Check the return string
        String expected = "Snickers:123-456-78:0.99:taxable\n" +
                "Milky Way:234-567-89:0.98:nontaxable";
        assertEquals(expected, productList.toString(), "The string returned by the product list does not match");

    }

    @Test
    void readProducts10() {
        XmlReader xr = new XmlReader("src/test/java/linkedlist/products-10.xml");
        ProductList productList = xr.getProducts();
        System.out.println("Products:" + productList);
        assertNotNull(productList, "Could not get products list");

        // Check the size
        System.out.println("SIZE: " + productList.size());
        assertEquals(10, productList.size(), "Incorrect product list size");
        // Check the sum
        assertEquals(9.45, productList.sum(), "Incorrect product list sum");

        // Check the returned string
        String expected = "Snickers:123-456-78:0.99:taxable\n" +
                "Milky Way:234-567-89:0.98:nontaxable\n" +
                "M & Ms:345-678-90:0.97:nontaxable\n" +
                "Mounds:456-789-01:0.96:taxable\n" +
                "Reeses:567-890-12:0.95:taxable\n" +
                "Almond Joy:678-901-23:0.94:taxable\n" +
                "Kit Kat:789-012-34:0.93:nontaxable\n" +
                "Mr. Goodbar:890-123-45:0.92:taxable\n" +
                "Hershey Bar:901-234-56:0.91:nontaxable\n" +
                "Cadbury:012-345-67:0.9:nontaxable";
        assertEquals(expected, productList.toString(), "The string returned by the product list does not match");

    }

}
