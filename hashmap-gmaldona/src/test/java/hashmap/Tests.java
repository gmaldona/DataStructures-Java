/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashmap;

import org.junit.jupiter.api.Test;

import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;

class Tests {
    @Test
    void testAccounts() {
        XmlReader myXmlReader = new XmlReader("data.xml");
        // Get Accounts
        HashMap<String, Account> accounts = myXmlReader.getAccounts();
        // Check size
        assertEquals(3,accounts.keySet().size(), "HashMap does not contain expected number of accounts") ;
        // Check each key
        String[] expectedKeys = {"123-45-678","234-56-789","234-56-788"};
        for (String acctNum : expectedKeys) {
            // Do a lookup
            Account myAccount = accounts.get(acctNum);
            assertNotNull(myAccount, "Expected Account not found");
            // Check the type and customer last name
            switch (acctNum){
                case "123-45-678": {
                    assertEquals("hashmap.CommercialAccount", myAccount.getClass().getName(), "Unexpected Account type");
                    assertEquals("Evans", myAccount.getCustomer().getLastName(), "Unexpected customer last name");
                    break;
                }
                case "234-56-789": {
                    assertEquals("hashmap.NonCommercialAccount", myAccount.getClass().getName(), "Unexpected Account type");
                    assertEquals("Albert", myAccount.getCustomer().getLastName(), "Unexpected customer last name");
                    break;
                }
                case "234-56-788": {
                    assertEquals("hashmap.CommercialAccount", myAccount.getClass().getName(), "Unexpected Account type");
                    assertEquals("Morgan", myAccount.getCustomer().getLastName(), "Unexpected customer last name");
                    break;
                }
            }
        }
    }

    @Test
    void testProducts() {
        XmlReader myXmlReader = new XmlReader("data.xml");
        // Get Products
        HashMap<String, Product> products = myXmlReader.getProducts();
        // Check size
        assertEquals(10,products.keySet().size(), "HashMap does not contain expected number of products") ;
        // Spot check a few ISBNs
        String[] expectedKeys = {"012-345-67","890-123-45","234-567-89"};
        for (String isbn : expectedKeys) {
            // Do a lookup
            Product myProduct = products.get(isbn);
            assertNotNull(myProduct, "Expected product not found");
            // Check the type
            switch (isbn){
                case "012-345-67": {
                    assertEquals("hashmap.NonTaxableProduct", myProduct.getClass().getName(), "Unexpected Product type");
                    assertEquals("Cadbury", myProduct.getProductName(), "Unexpected product name");
                    break;
                }
                case "890-123-45": {
                    assertEquals("hashmap.TaxableProduct", myProduct.getClass().getName(), "Unexpected Product type");
                    assertEquals("Mr. Goodbar", myProduct.getProductName(), "Unexpected product name");
                    break;
                }
                case "234-567-89": {
                    assertEquals("hashmap.NonTaxableProduct", myProduct.getClass().getName(), "Unexpected Product type");
                    assertEquals("Milky Way", myProduct.getProductName(), "Unexpected product name");
                    break;
                }
            }
        }
    }
}
